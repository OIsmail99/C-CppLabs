#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <windows.h>
#include <string.h>
#define UP 72
#define DOWN 80
#define ESC 27
#define ENTER 13
#define BACKSPACE 8
#define NEW 0
#define DISPLAY 1
#define MODIFY 2
#define DELETE 3
#define EXIT 4
#define SIZE 100 //array size
static int index = 0;

typedef struct Employee{
    int id;
    char name[50];
    int age;
}Employee;

static Employee employees[SIZE];

//red is 4, white is 15 .. from the header file but for some reason couldn't be preprocessed.
void setColor(int color_num){
    // Get the console handle
HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

// Set text color to bright green
SetConsoleTextAttribute(hConsole,color_num);
}


int isValidName(const char* str) {
    for (int i = 0; str[i] != '\0'; i++) {
        if (!isalpha(str[i]) && str[i] != ' ') { //if character is not alphabet or space
            return 0;  // Invalid character found
        }
    }
    return 1;  // All characters are valid (alphabetical and spaces only)
}

int isUniqueID(int input){

for(int i = 0; employees[i].age != NULL; i++){
    if(employees[i].id == input){
        return 0; //id not unique.
    }
}
return 1; //id is unique.
}

void createEmployees(){
system("cls");
printf("CREATING A NEW EMPLOYEE\n");
printf("What is the ID of the new employee? (unique & not exceeding 100): ");
/*
int new_id;

    printf("What is the ID of the new employee? (positive & not exceeding 100): ");
    while (1) {
        if (scanf("%d", &new_id) == 1 && new_id > 0 && new_id <= 100) {
            // Valid input
            break;
        } else {
            // Clear invalid input from the buffer
            while (getchar() != '\n');
            printf("Please enter a valid ID (positive & not exceeding 100): ");
        }
    }*/

int new_id;
while(scanf("%d",&new_id) == 0 ||  new_id < 0 || new_id >= 100 || isUniqueID(new_id) == 0){
    printf("please enter a valid id!: ");
    getchar();
}

getchar();
printf("What is the name of the new employee? ");
char new_name[50];

while(1){
        scanf("%[^\n]", &new_name);
        if(isValidName(new_name) == 1){
            break;
        }
        else{
      printf("please enter a valid name! (characters only)\n");
      while(getchar() != '\n');
        }
      };

printf("How old is the new employee? (not more than 60) \n");

int new_age;
while(1){
if(scanf("%d", &new_age)== 1 && new_age > 0 && new_age < 60 ){
    break;
}
else{
    printf("please enter a valid age!: \n");
    while(getchar() != '\n');
}
}

employees[index].id = new_id;
strcpy(employees[index].name, new_name);
employees[index].age = new_age;
index++;
}


void modifyEmployees(){
int old_id;
int new_id;
char new_name[50];
int new_age;

printf("List of Employee IDs\n");

for(int i =0; employees[i].age != NULL; i++){  //list of all employees
    printf("employee %d: %d\n", i+1, employees[i].id);
}

printf("Enter the ID of the Employee you want to modify: ");
scanf("%d", &old_id);
getchar();

int i = 0;
while(employees[i].id != old_id){ //traversing the list to get to the id of the person.
    i++;
}
if(employees[i].id == old_id ){
        int choice = 0;


        int flag = 1;

        while(flag == 1){
        printf("press 1 to change id, 2 to change name, 3 to change age\n");

        scanf("%d", &choice);

        switch(choice){
        case 1:
            printf("please enter the new ID: ");
            scanf("%d", &new_id);
            getchar();
            if(isUniqueID(new_id) == 1)
            {employees[i].id = new_id;
                flag = 0;
                break;
            }
            else{
                printf("invalid input!\n");
                break;
            }


        case 2:
            printf("please enter the new name: ");
            getchar();
            scanf("%[^\n]", &new_name);
            getchar();
            strcpy(employees[i].name,new_name);
            flag = 0;
            break;

        case 3:
            printf("please enter the new age: ");
            scanf("%d", &new_age);
            getchar();
            employees[i].age = new_age;
            flag = 0;
            break;

        default:
            printf("invalid input!\n");
            break;

        }
        }

}


}

void deleteEmployees(int input_id){
int i = 0;



while(employees[i].id != input_id){
    i++;
}
// 1 2 3 4 5 6 7 8 9 //[2]

if(i == SIZE){
    printf("employee with id %d not found!", input_id);
}

if(employees[i].id == input_id){

    for(int j = i; j < SIZE -1 ; j++){
      employees[j] = employees[j+1];
    }
}

}

void displayEmployees(){
int i =0;
if(employees[i].age == NULL){
    printf("NO EMPLOYEES ADDED YET!");
}
while(employees[i].age != NULL){
    printf("Employee number %d\n", i+1);
    printf("ID: %d\n", employees[i].id);
    printf("Name: %s\n", employees[i].name);
    printf("Age: %d\n", employees[i].age);
    printf("**************************\n");
    i++;
}

}

void displayMenu(int cursor){

    system("cls"); //clearing the terminal every time func is called.
    setColor(15); //code for white

    printf("\n\n\n\n\n");


    if(cursor==NEW){
        setColor(4); //code for red, because I like it ;)
        printf("\t\t\t\t\t\tNEW\n\n\n");
        setColor(15);
        printf("\t\t\t\t\t\tDISPLAY\n\n\n");
        printf("\t\t\t\t\t\tMODIFY\n\n\n");
        printf("\t\t\t\t\t\tDELETE\n\n\n");
        printf("\t\t\t\t\t\tEXIT\n\n\n");
        printf("\t\t\tNavigate with Up and Down. Exit with either ESC or EXIT\n\n\n");

    }
    if(cursor==DISPLAY){

        printf("\t\t\t\t\t\tNEW\n\n\n");
        setColor(4);
        printf("\t\t\t\t\t\tDISPLAY\n\n\n");
        setColor(15);
        printf("\t\t\t\t\t\tMODIFY\n\n\n");
        printf("\t\t\t\t\t\tDELETE\n\n\n");
        printf("\t\t\t\t\t\tEXIT\n\n\n");
        printf("\t\t\tNavigate with Up and Down. Exit with either ESC or EXIT\n\n\n");

    }
     if(cursor==MODIFY){
        printf("\t\t\t\t\t\tNEW\n\n\n");
        printf("\t\t\t\t\t\tDISPLAY\n\n\n");
        setColor(4);
        printf("\t\t\t\t\t\tMODIFY\n\n\n");
        setColor(15);
        printf("\t\t\t\t\t\tDELETE\n\n\n");
        printf("\t\t\t\t\t\tEXIT\n\n\n");
        printf("\t\t\tNavigate with Up and Down. Exit with either ESC or EXIT\n\n\n");

    }
     if(cursor==DELETE){
        printf("\t\t\t\t\t\tNEW\n\n\n");
        printf("\t\t\t\t\t\tDISPLAY\n\n\n");
        printf("\t\t\t\t\t\tMODIFY\n\n\n");
        setColor(4);
        printf("\t\t\t\t\t\tDELETE\n\n\n");
        setColor(15);
        printf("\t\t\t\t\t\tEXIT\n\n\n");
        printf("\t\t\tNavigate with Up and Down. Exit with either ESC or EXIT\n\n\n");

    }
    if(cursor==EXIT){
        printf("\t\t\t\t\t\tNEW\n\n\n");
        printf("\t\t\t\t\t\tDISPLAY\n\n\n");
        printf("\t\t\t\t\t\tMODIFY\n\n\n");
        printf("\t\t\t\t\t\tDELETE\n\n\n");
        setColor(4);
        printf("\t\t\t\t\t\tEXIT\n\n\n");
        setColor(15);
        printf("\t\t\tNavigate with Up and Down. Exit with either ESC or EXIT\n\n\n");

    }
}



int main(){




 int cursor = NEW;
//displayMenu(cursor);



int flag = 1;

while(flag){

displayMenu(cursor);

char c = getch();
//printf("%d\n", c);
if (c == -32){
        c = getch();
  //printf("%d", c);
}

switch(c){
case UP:
    cursor--;
    if(cursor == NEW - 1){ //wrapping down the cursor to point to EXIT
        cursor = EXIT;
    }
    //displayMenu(cursor);
    break;

case DOWN:
    cursor++;
    if(cursor == EXIT + 1){
        cursor = NEW;
    }
    //displayMenu(cursor);
    break;

case ESC:
    flag = 0;
    break;


case ENTER:
    if(cursor == NEW){

        int endFlag = 0;

        while(endFlag == 0){
        createEmployees();
        getchar();
        char decision;
        printf("Do you want to add an Employee? (y/n): ");

        while(1){
            if(scanf("%c",&decision) == 1){
                if(decision == 'y'){
                    break;
                }
                else if(decision == 'n'){
                    endFlag = 1;
                    printf("ahmad");
                    break;
                }
                else{
                    printf("invalid input! Do you want to add an Employee? (y/n)\n");
                    while(getchar() != '\n');
                }
            }
            else{
                printf("invalid input! Do you want to add an Employee? (y/n)\n");
                while(getchar() != '\n');
                break;
            }

        }
        }
        }
///////////////////////////////////////////////////////////////////////////////

    if(cursor == EXIT){
        flag = 0;
    }
//////////////////////////////////////////////////////////////////////////////
    if(cursor == DISPLAY){
        system("cls");
        displayEmployees();
        char c = getch();
        if(c == BACKSPACE){
            cursor = NEW;
            break;
        }
    }
///////////////////////////////////////////////////////////////////////////////

    if(cursor == MODIFY){
        system("cls");
        modifyEmployees();
        char c = getch();
        if(c == BACKSPACE){
            cursor = NEW;
            break;
        }

    }

///////////////////////////////////////////////////////////////////////////////////
    if(cursor == DELETE){
        system("cls");
        printf("Enter the id of the employee you want to delete: ");
        int input_id;
        scanf("%d", &input_id);
        deleteEmployees(input_id);
        char c = getch();
        if(c == BACKSPACE){
            cursor = NEW;
            break;
        }

    }



}
}
setColor(15);

return 0;
}
